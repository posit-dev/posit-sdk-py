from __future__ import annotations

import asyncio
import os
import pathlib
import shutil

import pyright

# Set working directory to the root of the repository
repo_root = pathlib.Path(__file__)
while not os.path.exists(repo_root / "pyproject.toml"):
    repo_root = repo_root.parent
os.chdir(repo_root)


def cleanup() -> None:
    # Clean slate
    print("Clean up")
    for f in ["typings", "repomix-output.txt", "repomix-output.xml"]:
        path = repo_root / f
        if os.path.exists(path):
            print("Removing path:", path.relative_to(repo_root))
            if path.is_dir():
                shutil.rmtree(path)
            else:
                os.remove(path)
    print("--\n")


async def main() -> None:
    # Clean slate
    cleanup()

    print("Creating type stubs: ./typings")
    pyright.run("--createstub", "src/posit")
    print("--\n")

    print("Trimming type stubs")
    remove_prefix_from_files(
        "typings",
        '"""\nThis type stub file was generated by pyright.\n"""\n\n',
    )
    print("--\n")

    print("Creating repomix output")

    # Assert npx exists in system
    assert os.system("npx --version") == 0, "npx not found in system. Please install Node.js"
    os.system(
        "npx repomix --config shiny/assistant/repomix.config.json --output shiny/assistant/prompt.xml typings/src/posit"
    )

    # repomix GitHub Repo: https://github.com/yamadashy/repomix
    # Python alternative: https://pypi.org/project/code2prompt/
    # * Does not contain XML output (suggested by anthropic)
    print("--\n")

    # Clean slate
    cleanup()


def remove_prefix_from_files(folder: str | pathlib.Path, prefix: str) -> None:
    root_folder = pathlib.Path(folder)
    for path in root_folder.rglob("*.pyi"):
        with open(path, "r") as f:
            file_txt = f.read()

        file_txt = file_txt.removeprefix(prefix)

        with open(path, "w") as f:
            f.write(file_txt)


if __name__ == "__main__":
    asyncio.run(main())
